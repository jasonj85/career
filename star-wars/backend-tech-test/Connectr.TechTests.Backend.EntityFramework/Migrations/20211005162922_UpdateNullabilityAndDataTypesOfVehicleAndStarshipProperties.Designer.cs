// <auto-generated />
using System;
using Connectr.TechTests.Backend.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Connectr.TechTests.Backend.EntityFramework.Migrations
{
    [DbContext(typeof(StarwarsDbContext))]
    [Migration("20211005162922_UpdateNullabilityAndDataTypesOfVehicleAndStarshipProperties")]
    partial class UpdateNullabilityAndDataTypesOfVehicleAndStarshipProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharacterFilm", b =>
                {
                    b.Property<int>("CharactersId")
                        .HasColumnType("int");

                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.HasKey("CharactersId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("CharacterFilm");
                });

            modelBuilder.Entity("CharacterSpecies", b =>
                {
                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("PeopleId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("CharacterSpecies");
                });

            modelBuilder.Entity("CharacterStarship", b =>
                {
                    b.Property<int>("PilotsId")
                        .HasColumnType("int");

                    b.Property<int>("StarshipsId")
                        .HasColumnType("int");

                    b.HasKey("PilotsId", "StarshipsId");

                    b.HasIndex("StarshipsId");

                    b.ToTable("CharacterStarship");
                });

            modelBuilder.Entity("CharacterVehicle", b =>
                {
                    b.Property<int>("PilotsId")
                        .HasColumnType("int");

                    b.Property<int>("VehiclesId")
                        .HasColumnType("int");

                    b.HasKey("PilotsId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("CharacterVehicle");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EyeColor")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("HairColor")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("HomeworldId")
                        .HasColumnType("int");

                    b.Property<int?>("Mass")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeworldId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Episode")
                        .HasColumnType("int");

                    b.Property<string>("OpeningCrawl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Diameter")
                        .HasColumnType("int");

                    b.Property<decimal?>("Gravity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrbitalPeriod")
                        .HasColumnType("int");

                    b.Property<long?>("Population")
                        .HasColumnType("bigint");

                    b.Property<int?>("RotationPeriod")
                        .HasColumnType("int");

                    b.Property<decimal?>("SurfaceWater")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AverageHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AverageLifespan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<int>("Designation")
                        .HasColumnType("int");

                    b.Property<int?>("HomeworldId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeworldId");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Starship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CargoCapacity")
                        .HasColumnType("bigint");

                    b.Property<string>("Consumables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CostInCredits")
                        .HasColumnType("bigint");

                    b.Property<int?>("Crew")
                        .HasColumnType("int");

                    b.Property<decimal?>("HyperdriveRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mglt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Passengers")
                        .HasColumnType("int");

                    b.Property<string>("StarshipClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Starships");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CargoCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Consumables")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CostInCredits")
                        .HasColumnType("int");

                    b.Property<int>("Crew")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Passengers")
                        .HasColumnType("int");

                    b.Property<string>("VehicleClass")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("FilmPlanet", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("PlanetsId")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "PlanetsId");

                    b.HasIndex("PlanetsId");

                    b.ToTable("FilmPlanet");
                });

            modelBuilder.Entity("FilmSpecies", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("FilmSpecies");
                });

            modelBuilder.Entity("FilmStarship", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("StarshipsId")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "StarshipsId");

                    b.HasIndex("StarshipsId");

                    b.ToTable("FilmStarship");
                });

            modelBuilder.Entity("FilmVehicle", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("VehiclesId")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "VehiclesId");

                    b.HasIndex("VehiclesId");

                    b.ToTable("FilmVehicle");
                });

            modelBuilder.Entity("CharacterFilm", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSpecies", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterStarship", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("PilotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Starship", null)
                        .WithMany()
                        .HasForeignKey("StarshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterVehicle", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("PilotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Character", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Planet", "Homeworld")
                        .WithMany("Residents")
                        .HasForeignKey("HomeworldId");

                    b.Navigation("Homeworld");
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Species", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Planet", "Homeworld")
                        .WithMany()
                        .HasForeignKey("HomeworldId");

                    b.Navigation("Homeworld");
                });

            modelBuilder.Entity("FilmPlanet", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Planet", null)
                        .WithMany()
                        .HasForeignKey("PlanetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmSpecies", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Species", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmStarship", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Starship", null)
                        .WithMany()
                        .HasForeignKey("StarshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmVehicle", b =>
                {
                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Connectr.TechTests.Backend.EntityFramework.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehiclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Connectr.TechTests.Backend.EntityFramework.Models.Planet", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
